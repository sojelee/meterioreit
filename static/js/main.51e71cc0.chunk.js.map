{"version":3,"sources":["serviceWorker.js","components/MeteoreitsGrid.js","components/loading.js","components/error.js","components/Meteoreit.js","containers/common/header.js","pages/landings.js","index.js"],"names":["Boolean","window","location","hostname","match","MeteoreitsGrid","props","name","id","nametype","recclass","mass","fall","year","latitude","longitude","react_default","a","createElement","className","Loading","Error","GET_LANDINGS","gql","_templateObject","Meteoreit","_useState","useState","_useState2","Object","slicedToArray","filter","setFilter","_useState3","_useState4","searching","switchSearch","Fragment","onChange","e","target","value","type","placeholder","onClick","react_apollo_esm","query","_ref","data","loading","error","landings","components_loading","components_error","map","item","components_MeteoreitsGrid","key","reclat","reclong","toLowerCase","Header","Landings","HashRouter","header","Route","exact","path","render","components_Meteoreit","React","Component","cache","InMemoryCache","client","ApolloClient","link","HttpLink","uri","ReactDOM","landings_Landings","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.51e71cc0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nconst MeteoreitsGrid = (props) =>{\r\n    const { name, id,nametype,recclass,mass,fall,\r\n        year,latitude,longitude\r\n     } = props;\r\n    return(\r\n<div   className=\"flex justify-center py-6\">\r\n\r\n<div className=\"flex-wrap\">\r\n<div className=\"flex items-center justify-center bg-teal h-24 w-128\">\r\n     <div className=\"w-64 text-grey-light font-bold\">\r\n         <div>Name</div>\r\n         <div className=\"pt-3 text-white font-bold\">{name}</div>\r\n     </div>\r\n         <div className=\"w-32 text-grey-light font-bold\">\r\n         <div>Name Type</div>\r\n         <div className=\"pt-3 font-bold text-white font-bold\">{nametype}</div>\r\n         </div>\r\n         <div className=\"w-24 text-grey-light font-bold\">\r\n         <div>Id</div>\r\n         <div className=\"pt-3 text-white font-bold\">{id}</div>\r\n         </div>\r\n         \r\n  </div>\r\n\r\n  <div className=\"flex items-center justify-center bg-teal h-16 w-128\">\r\n     <div className=\"w-64 text-grey-light font-bold\">\r\n         \r\n           <div>RecClass</div>\r\n           <div className=\"pt-3 text-white font-bold\">{recclass}</div>\r\n         </div>\r\n         <div className=\"w-32 text-grey-light font-bold\"><div>\r\n             Mass\r\n         </div>\r\n         <div className=\"pt-3 text-white font-bold\">{mass}</div>\r\n         </div>\r\n         <div className=\"w-24 text-grey-light font-bold\"> \r\n           <div>Fall</div>\r\n           <div className=\"pt-3 text-white font-bold\">{fall}</div>\r\n         </div>\r\n         \r\n  </div>\r\n  <div className=\"flex items-center justify-center bg-teal h-24 w-128\">\r\n     <div className=\"w-64 text-grey-light font-bold\">\r\n           <div>Year</div>\r\n           <div className=\"pt-3 text-white font-bold\">{year}</div>\r\n         </div>\r\n         <div className=\"w-32 text-grey-light font-bold\">\r\n             <div>Latitude</div>\r\n             <div className=\"pt-3 text-white font-bold\">{latitude}</div>\r\n         </div>\r\n         <div className=\"w-24 text-grey-light font-bold\">\r\n             <div>\r\n             Longitude\r\n             </div>\r\n             <div className=\"pt-3 text-white font-bold\">{longitude}</div>\r\n             \r\n         </div>\r\n         \r\n  </div>\r\n \r\n</div>\r\n\r\n </div>\r\n );\r\n}\r\nexport default MeteoreitsGrid;","import React from 'react';\r\n\r\n\r\nconst Loading = ()=> {\r\n  return <div className=\"flex items-center justify-center\">\r\n          <h1>Loading</h1>\r\n      </div>\r\n}\r\nexport default Loading;\r\n","import React from 'react';\r\n\r\n\r\nconst Error = ()=> {\r\n  return <div className=\"flex items-center justify-center\">\r\n          <h1>Ooops, the Server is not avalable</h1>\r\n      </div>\r\n}\r\nexport default Error;\r\n","import React, { useState } from 'react';\r\nimport MeteoreitsGrid from './MeteoreitsGrid'\r\nimport Loading from './loading';\r\nimport Error from './error';\r\nimport { Query } from 'react-apollo';\r\nimport gql from 'graphql-tag';\r\n\r\nexport const GET_LANDINGS = gql`\r\n  query {\r\n  landings {\r\n   id\r\n    mass\r\n    name\r\n    geolocation{\r\n      latitude\r\n      longitude\r\n    }\r\n    fall\r\n    reclat\r\n    reclong\r\n    recclass\r\n    year\r\n    nametype\r\n  }\r\n} \r\n`;\r\n\r\nconst Meteoreit = () =>{\r\n  const [filter, setFilter] = useState('');\r\n  const [searching,switchSearch]= useState(false);\r\n  const onChange = e =>{\r\n    if(e.target.value===\"\"){\r\n      switchSearch(false);\r\n    }\r\n    setFilter(e.target.value)\r\n  }\r\n  const executeSearch=()=> {\r\n    switchSearch(true);\r\n    return filter;\r\n  }\r\nreturn(\r\n  <>\r\n  <>\r\n  <div className=\"flex justify-center mt-6\">\r\n               <div className=\"mr-4\">\r\n                 <input \r\n                      onChange={onChange}\r\n                      type=\"text\" \r\n                      className=\"bg-grey-lighter h-8 px-4 text-xs w-48 rounded-full\" placeholder=\"Search\" \r\n                      />\r\n               </div>\r\n               <div className=\"mr-4\">\r\n                 <button\r\n                    onClick={executeSearch}\r\n                    className=\"bg-teal hover:bg-teal-dark text-white font-mediaum py-2 px-4 rounded-full\"\r\n                    >Search\r\n                    </button>\r\n               </div>\r\n           </div>\r\n  </>\r\n      <Query query={GET_LANDINGS}>\r\n      {({ data, loading, error }) => {\r\n    const { landings } = data;\r\n    if (loading) return <Loading />;\r\n    if (error ) return <Error />;\r\n    if(searching === false){\r\n      return(\r\n        landings.map(item =>{\r\n         return(\r\n        <MeteoreitsGrid key ={item.id}\r\n          name={item.name}\r\n          id={item.id} \r\n          nametype={item.nametype}\r\n          recclass={item.recclass}\r\n          mass={item.mass}\r\n          fall={item.fall}\r\n          year={item.year}\r\n          latitude={item.reclat}\r\n          longitude={item.reclong}\r\n       />\r\n        )\r\n       })\r\n      )\r\n    }else{\r\n      let filteredLandins = landings.filter(item=> item.name.toLowerCase()===filter.toLowerCase());\r\n          return(\r\n                   \r\n            filteredLandins.map(\r\n              item=>{\r\n                return(\r\n                  <MeteoreitsGrid key ={item.id}\r\n                  name={item.name}\r\n                  id={item.id} \r\n                  nametype={item.nametype}\r\n                  recclass={item.recclass}\r\n                  mass={item.mass}\r\n                  fall={item.fall}\r\n                  year={item.year}\r\n                  latitude={item.reclat}\r\n                  longitude={item.reclong}\r\n               />\r\n                )\r\n                  \r\n                \r\n              }\r\n            )\r\n           \r\n      )\r\n    }\r\n\r\n   }}\r\n\r\n</Query>\r\n</>\r\n    );\r\n}\r\nexport default Meteoreit;","import React from 'react';\r\nimport '../../App.css';\r\n\r\nconst Header = ()=>{\r\n return(\r\n      <div className=\"bg-white\">\r\n      <div className=\"container flex items-center py-4\">\r\n           <div className=\"w-2/3 ml-6\">\r\n             <span className=\"flex items-center flex-no-shrink text-teal mr-6\">\r\n             Meteoreit Explorer App\r\n             </span>\r\n           </div>    \r\n        </div> {/*  end of container */}\r\n\r\n        <div className=\"hero bg-teal-light h-1\">\r\n        </div>\r\n       </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport Meteoreit from '../components/Meteoreit';\r\nimport Header from '../containers/common/header';\r\n\r\nexport default class Landings extends React.Component{\r\n \r\n render(){\r\n     \r\n      return(\r\n      <HashRouter>\r\n        <>  \r\n            <Header />\r\n            <Route exact  path='/' render={(props) =>{\r\n                return (<Meteoreit />)\r\n                    }}\r\n            />\r\n        </> \r\n      </HashRouter>\r\n        \r\n      )\r\n    }\r\n  }\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/tailwind.css';\n\nimport {ApolloClient} from 'apollo-client';\nimport {InMemoryCache} from 'apollo-cache-inmemory';\nimport {HttpLink} from 'apollo-link-http';\nimport { ApolloProvider} from 'react-apollo';\n\nimport Landings from './pages/landings';\n\n\n// Set up our apollo-client to point at the server we created\n// this can be local or a remote endpoint\nconst cache = new InMemoryCache();\nconst client = new ApolloClient({\n  cache,\n  link: new HttpLink({\n    uri: 'https://dry-forest-13603.herokuapp.com/graphql',\n  }),\n});\n    \nReactDOM.render((\n  <ApolloProvider client={client}>\n    <Landings />\n  </ApolloProvider>  \n  ),\n    document.getElementById('root')\n  )\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}